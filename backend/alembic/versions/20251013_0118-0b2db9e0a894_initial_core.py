"""initial_core

Revision ID: 0b2db9e0a894
Revises: 3c7d11461ab4
Create Date: 2025-10-13 01:18:41.746425

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '0b2db9e0a894'
down_revision: Union[str, Sequence[str], None] = '3c7d11461ab4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('firebase_uid', sa.String(length=128), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('display_name', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_firebase_uid'), 'users', ['firebase_uid'], unique=True)
    op.create_table('personas',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('username', sa.String(length=50), nullable=False),
    sa.Column('public_name', sa.String(length=100), nullable=False),
    sa.Column('base_prompt', sa.Text(), nullable=True),
    sa.Column('system_prompt', sa.Text(), nullable=True),
    sa.Column('welcome_message', sa.Text(), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=False),
    sa.Column('max_tokens', sa.Integer(), nullable=False),
    sa.Column('llm_provider', sa.String(length=20), nullable=False),
    sa.Column('llm_model', sa.String(length=50), nullable=True),
    sa.Column('profile_image_url', sa.String(length=512), nullable=True),
    sa.Column('social_links', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('custom_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_personas_is_active'), 'personas', ['is_active'], unique=False)
    op.create_index(op.f('ix_personas_user_id'), 'personas', ['user_id'], unique=False)
    op.create_index(op.f('ix_personas_username'), 'personas', ['username'], unique=True)
    op.create_table('conversations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('persona_id', sa.UUID(), nullable=False),
    sa.Column('visitor_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('message_count', sa.Integer(), nullable=False),
    sa.Column('total_tokens_used', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['persona_id'], ['personas.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_conversations_is_active'), 'conversations', ['is_active'], unique=False)
    op.create_index(op.f('ix_conversations_persona_id'), 'conversations', ['persona_id'], unique=False)
    op.create_index(op.f('ix_conversations_started_at'), 'conversations', ['started_at'], unique=False)
    op.create_table('knowledge_modules',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('persona_id', sa.UUID(), nullable=False),
    sa.Column('module_type', sa.String(length=50), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('content', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('priority', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('module_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['persona_id'], ['personas.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_knowledge_modules_is_active'), 'knowledge_modules', ['is_active'], unique=False)
    op.create_index(op.f('ix_knowledge_modules_module_type'), 'knowledge_modules', ['module_type'], unique=False)
    op.create_index(op.f('ix_knowledge_modules_persona_id'), 'knowledge_modules', ['persona_id'], unique=False)
    op.create_table('knowledge_chunks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('module_id', sa.UUID(), nullable=False),
    sa.Column('chunk_text', sa.Text(), nullable=False),
    sa.Column('chunk_index', sa.Integer(), nullable=False),
    sa.Column('embedding', pgvector.sqlalchemy.vector.VECTOR(dim=768), nullable=True),
    sa.Column('token_count', sa.Integer(), nullable=True),
    sa.Column('chunk_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['module_id'], ['knowledge_modules.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_knowledge_chunks_module_id'), 'knowledge_chunks', ['module_id'], unique=False)
    op.create_table('messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('conversation_id', sa.UUID(), nullable=False),
    sa.Column('sender', sa.String(length=10), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('sources_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('tokens_used', sa.Integer(), nullable=True),
    sa.Column('latency_ms', sa.Integer(), nullable=True),
    sa.Column('message_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_messages_conversation_id'), 'messages', ['conversation_id'], unique=False)
    op.create_index(op.f('ix_messages_created_at'), 'messages', ['created_at'], unique=False)
    op.create_table('owner_feedback',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('persona_id', sa.UUID(), nullable=False),
    sa.Column('original_message_id', sa.UUID(), nullable=False),
    sa.Column('visitor_question', sa.Text(), nullable=False),
    sa.Column('original_response', sa.Text(), nullable=False),
    sa.Column('improved_response', sa.Text(), nullable=False),
    sa.Column('feedback_notes', sa.Text(), nullable=True),
    sa.Column('is_applied', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['original_message_id'], ['messages.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['persona_id'], ['personas.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_owner_feedback_is_applied'), 'owner_feedback', ['is_applied'], unique=False)
    op.create_index(op.f('ix_owner_feedback_persona_id'), 'owner_feedback', ['persona_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_owner_feedback_persona_id'), table_name='owner_feedback')
    op.drop_index(op.f('ix_owner_feedback_is_applied'), table_name='owner_feedback')
    op.drop_table('owner_feedback')
    op.drop_index(op.f('ix_messages_created_at'), table_name='messages')
    op.drop_index(op.f('ix_messages_conversation_id'), table_name='messages')
    op.drop_table('messages')
    op.drop_index(op.f('ix_knowledge_chunks_module_id'), table_name='knowledge_chunks')
    op.drop_table('knowledge_chunks')
    op.drop_index(op.f('ix_knowledge_modules_persona_id'), table_name='knowledge_modules')
    op.drop_index(op.f('ix_knowledge_modules_module_type'), table_name='knowledge_modules')
    op.drop_index(op.f('ix_knowledge_modules_is_active'), table_name='knowledge_modules')
    op.drop_table('knowledge_modules')
    op.drop_index(op.f('ix_conversations_started_at'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_persona_id'), table_name='conversations')
    op.drop_index(op.f('ix_conversations_is_active'), table_name='conversations')
    op.drop_table('conversations')
    op.drop_index(op.f('ix_personas_username'), table_name='personas')
    op.drop_index(op.f('ix_personas_user_id'), table_name='personas')
    op.drop_index(op.f('ix_personas_is_active'), table_name='personas')
    op.drop_table('personas')
    op.drop_index(op.f('ix_users_firebase_uid'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    # ### end Alembic commands ###
